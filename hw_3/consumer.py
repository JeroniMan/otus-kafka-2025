#!/usr/bin/env python3
"""
Kafka Consumer with Read Committed Isolation Level
Reads only messages from committed transactions

Usage:
    python consumer.py                    # Read committed only (default)
    python consumer.py --read-uncommitted  # Read all messages including aborted
"""

from kafka import KafkaConsumer, TopicPartition
from kafka.errors import KafkaError
import json
import logging
import signal
import sys
import argparse
from datetime import datetime
from typing import Dict, List


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
class ColoredFormatter(logging.Formatter):
    """Colored log formatter"""

    grey = "\x1b[38;21m"
    green = "\x1b[32m"
    yellow = "\x1b[33m"
    red = "\x1b[31m"
    cyan = "\x1b[36m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"

    FORMATS = {
        logging.DEBUG: grey + "%(asctime)s - %(levelname)s - %(message)s" + reset,
        logging.INFO: green + "%(asctime)s - %(levelname)s - %(message)s" + reset,
        logging.WARNING: yellow + "%(asctime)s - %(levelname)s - %(message)s" + reset,
        logging.ERROR: red + "%(asctime)s - %(levelname)s - %(message)s" + reset,
        logging.CRITICAL: bold_red + "%(asctime)s - %(levelname)s - %(message)s" + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt, datefmt='%Y-%m-%d %H:%M:%S')
        return formatter.format(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_BOOTSTRAP_SERVERS = 'localhost:9092'
TOPICS = ['topic1', 'topic2']
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π consumer group –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
CONSUMER_GROUP = 'homework-transactional-consumer'


class TransactionalConsumer:
    """Kafka Consumer –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self, isolation_level='read_committed'):
        self.isolation_level = isolation_level
        self.consumer = None
        self.running = True
        self.stats: Dict[str, int] = {
            'total_messages': 0,
            'topic1_messages': 0,
            'topic2_messages': 0,
            'committed_messages': 0,
            'aborted_messages': 0
        }

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("\n‚ö†Ô∏è  Received interrupt signal, shutting down gracefully...")
        self.running = False

    def create_consumer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Kafka Consumer —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∏–∑–æ–ª—è—Ü–∏–∏"""
        logger.info(f"Creating consumer with isolation_level='{self.isolation_level}'")

        consumer = KafkaConsumer(
            bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
            group_id=CONSUMER_GROUP,
            auto_offset_reset='earliest',  # –ß–∏—Ç–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ —Ç–æ–ø–∏–∫–∞
            enable_auto_commit=False,  # –†—É—á–Ω–æ–π –∫–æ–º–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            value_deserializer=lambda m: json.loads(m.decode('utf-8')),
            key_deserializer=lambda k: k.decode('utf-8') if k else None,
            isolation_level=self.isolation_level,  # –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!
            max_poll_records=100,
            session_timeout_ms=30000,
            heartbeat_interval_ms=3000,
            consumer_timeout_ms=1000  # –¢–∞–π–º–∞—É—Ç –¥–ª—è poll() –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
        consumer.subscribe(topics=TOPICS)

        # –í–∞–∂–Ω–æ: –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π poll –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–π
        logger.info("Initializing consumer partitions...")
        consumer.poll(timeout_ms=1000)

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏
        partitions = consumer.assignment()
        if partitions:
            logger.info(f"Seeking to beginning for {len(partitions)} partitions")
            consumer.seek_to_beginning(*partitions)
        else:
            logger.info("No partitions assigned yet, will read from auto_offset_reset position")

        return consumer

    def print_message(self, message, index):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        value = message.value
        headers = dict(message.headers) if message.headers else {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        tx_status = value.get('transaction_status', 'UNKNOWN')
        tx_id = value.get('transaction_id', 'N/A')

        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        if tx_status == 'COMMITTED':
            status_color = "\x1b[32m"  # –ó–µ–ª–µ–Ω—ã–π
            self.stats['committed_messages'] += 1
        elif tx_status == 'ABORTED':
            status_color = "\x1b[31m"  # –ö—Ä–∞—Å–Ω—ã–π
            self.stats['aborted_messages'] += 1
        else:
            status_color = "\x1b[33m"  # –ñ–µ–ª—Ç—ã–π

        reset = "\x1b[0m"
        cyan = "\x1b[36m"

        print(f"\n{cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{reset}")
        print(f"{cyan}‚ïë{reset} Message #{index:<4} {status_color}[{tx_status}]{reset}")
        print(f"{cyan}‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢{reset}")
        print(f"{cyan}‚ïë{reset} Topic:        {message.topic}")
        print(f"{cyan}‚ïë{reset} Partition:    {message.partition}")
        print(f"{cyan}‚ïë{reset} Offset:       {message.offset}")
        print(f"{cyan}‚ïë{reset} Key:          {message.key}")
        print(f"{cyan}‚ïë{reset} Timestamp:    {datetime.fromtimestamp(message.timestamp / 1000).isoformat()}")
        print(f"{cyan}‚ïë{reset} Transaction:  ID={tx_id}, Status={tx_status}")

        if headers:
            print(f"{cyan}‚ïë{reset} Headers:      {headers}")

        if 'data' in value:
            data = value['data']
            print(f"{cyan}‚ïë{reset} Data:")
            print(f"{cyan}‚ïë{reset}   - Content:  {data.get('content')}")
            print(f"{cyan}‚ïë{reset}   - Value:    {data.get('value')}")
            if 'note' in data:
                print(f"{cyan}‚ïë{reset}   - Note:     {data.get('note')}")

        print(f"{cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{reset}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–ø–∏–∫–∞–º
        if message.topic == 'topic1':
            self.stats['topic1_messages'] += 1
        elif message.topic == 'topic2':
            self.stats['topic2_messages'] += 1

    def consume_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("=" * 70)
            logger.info("KAFKA TRANSACTIONAL CONSUMER")
            logger.info(f"Consumer Group: {CONSUMER_GROUP}")
            logger.info(f"Isolation Level: {self.isolation_level}")
            logger.info(f"Topics: {', '.join(TOPICS)}")
            logger.info("=" * 70)

            self.consumer = self.create_consumer()

            logger.info(f"\nüì° Consumer started. Listening to topics: {TOPICS}")
            logger.info(f"üîç Isolation level: '{self.isolation_level}'")

            if self.isolation_level == 'read_committed':
                logger.info("‚úÖ Will read ONLY messages from COMMITTED transactions")
            else:
                logger.info("‚ö†Ô∏è  Will read ALL messages including ABORTED transactions")

            logger.info("\n" + "=" * 70)
            logger.info("CONSUMING MESSAGES...")
            logger.info("=" * 70)

            message_count = 0
            empty_polls = 0
            max_empty_polls = 5  # –ü–æ—Å–ª–µ 5 –ø—É—Å—Ç—ã—Ö poll'–æ–≤ –∑–∞–≤–µ—Ä—à–∞–µ–º

            while self.running:
                try:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages = self.consumer.poll(timeout_ms=1000, max_records=10)

                    if not messages:
                        empty_polls += 1
                        if empty_polls >= max_empty_polls:
                            logger.info("\nüì≠ No more messages to consume")
                            break
                        continue

                    empty_polls = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for topic_partition, records in messages.items():
                        for message in records:
                            message_count += 1
                            self.stats['total_messages'] += 1
                            self.print_message(message, message_count)

                    # –ö–æ–º–º–∏—Ç–∏–º offset'—ã
                    self.consumer.commit()

                except Exception as e:
                    logger.error(f"Error processing messages: {e}")
                    continue

            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_statistics()

        except KafkaError as e:
            logger.error(f"Kafka error: {e}")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
        finally:
            if self.consumer:
                self.consumer.close()
                logger.info("üîí Consumer closed")

    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
        logger.info("\n" + "=" * 70)
        logger.info("üìä CONSUMPTION STATISTICS")
        logger.info("=" * 70)
        logger.info(f"Total messages consumed: {self.stats['total_messages']}")
        logger.info(f"  ‚Üí From topic1: {self.stats['topic1_messages']}")
        logger.info(f"  ‚Üí From topic2: {self.stats['topic2_messages']}")

        if self.isolation_level == 'read_committed':
            logger.info(f"\n‚úÖ Messages from COMMITTED transactions: {self.stats['committed_messages']}")
            logger.info(f"‚ùå Messages from ABORTED transactions: {self.stats['aborted_messages']}")

            if self.stats['aborted_messages'] > 0:
                logger.warning("‚ö†Ô∏è  Warning: Found aborted messages with read_committed!")
                logger.warning("    This should not happen. Check your Kafka configuration.")
            elif self.stats['committed_messages'] == 10:
                logger.info("\nüéâ SUCCESS! Consumer correctly read only committed messages!")
                logger.info("   Expected: 10 messages (5 from each topic)")
                logger.info("   Received: 10 messages ‚úì")
        else:
            logger.info(f"\nMessages breakdown:")
            logger.info(f"  ‚Üí From committed transactions: {self.stats['committed_messages']}")
            logger.info(f"  ‚Üí From aborted transactions: {self.stats['aborted_messages']}")

        logger.info("=" * 70)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='Kafka Consumer for reading transactional messages'
    )
    parser.add_argument(
        '--read-uncommitted',
        action='store_true',
        help='Read all messages including aborted transactions (default: read only committed)'
    )
    parser.add_argument(
        '--group-id',
        type=str,
        help='Custom consumer group ID (default: homework-transactional-consumer)'
    )
    parser.add_argument(
        '--reset',
        action='store_true',
        help='Reset consumer group to read from beginning'
    )
    return parser.parse_args()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑–æ–ª—è—Ü–∏–∏
    if args.read_uncommitted:
        isolation_level = 'read_uncommitted'
        logger.warning("‚ö†Ô∏è  Running with 'read_uncommitted' - will see aborted transactions!")
    else:
        isolation_level = 'read_committed'
        logger.info("‚úÖ Running with 'read_committed' - will see only committed transactions")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º group_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    global CONSUMER_GROUP
    if args.group_id:
        CONSUMER_GROUP = args.group_id

    # –ï—Å–ª–∏ —Ñ–ª–∞–≥ --reset, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π group_id –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–∞
    if args.reset:
        CONSUMER_GROUP = f'reset-consumer-{datetime.now().strftime("%Y%m%d-%H%M%S")}'
        logger.info(f"üîÑ Reset mode: using new consumer group '{CONSUMER_GROUP}'")

    try:
        consumer = TransactionalConsumer(isolation_level=isolation_level)
        consumer.consume_messages()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  Consumer interrupted by user")
    except Exception as e:
        logger.error(f"Failed to run consumer: {e}")
        raise


if __name__ == "__main__":
    main()